	/**
	 * Resize an image
	 *
	 * @param   string    $fullPath   The full path to the image
	 * @param   string    $type        The type of image
	 *
	 * @return bool
	 * @since 3.0.11
	 */
	public static function resize(string $fullPath, string $type)
	{
		// first check if we should resize this target
		if (1 == Helper::getParams()->get($type . '_resize', 0))
		{
			// load the size to be set
			$height = Helper::getParams()->get($type . '_height', 'not_set');
			$width = Helper::getParams()->get($type . '_width', 'not_set');

			// Get file extension/format
			$file_format = MimeHelper::extension($fullPath);

			// get image properties
			$image = self::getProperties($fullPath);

			// make sure we have an object
			if (ObjectHelper::check($image) && is_string($file_format))
			{
				if ($width !== 'not_set' && $height !== 'not_set' && ($image->width != $width || $image->height != $height))
				{
					// if image is huge and should only be scaled, resize it on the fly
					if(($image->width > 900 || $image->height > 700) && ($height == 0 || $width == 0))
					{
						// select the image "getter" based on format
						if($file_format == "jpg" || $file_format == "jpeg" )
						{
							$src = imagecreatefromjpeg($fullPath);
						}
						elseif($file_format == "png")
						{
							$src = imagecreatefrompng($fullPath);
						}
						elseif($file_format == "gif")
						{
							$src = imagecreatefromgif($fullPath);
						}
						// we only support the above three formats for now
						else
						{
							return false;
						}

						// workout the ratio if we have height
						if ($height != 0)
						{
							$height_ratio = $image->height / $height;
						}

						// workout the ratio if we have width
						if ($width != 0)
						{
							$width_ratio = $image->width / $width;
						}

						// set max ratio based on both
						if (isset($height_ratio) && isset($width_ratio))
						{
							$max_ratio	= max($width_ratio, $height_ratio);
						}
						// set max ratio based on width
						elseif (isset($width_ratio))
						{
							$max_ratio	= $width_ratio;
						}
						// set max ratio based on height
						elseif (isset($height_ratio))
						{
							$max_ratio	= $height_ratio;
						}

						// if we have ratio do the conversion
						if ($max_ratio > 1)
						{
							$new_width	= $image->width / $max_ratio;
							$new_height	= $image->height / $max_ratio;
						}
						else
						{
							$new_width	= $image->width;
							$new_height	= $image->height;
						}

						$tmp			= imagecreatetruecolor($new_width, $new_height);
						$background_color	= imagecolorallocate($tmp, 255, 255, 255);

						imagefill($tmp, 0, 0, $background_color);
						imagecopyresampled($tmp, $src, 0, 0, 0, 0,$new_width, $new_height, $image->width, $image->height);
						imagejpeg($tmp, $fullPath, 100);
						imagedestroy($src);
						imagedestroy($tmp);
					}
					// we only crop if both height and width is set to crop
					if ($height != 0 && $width != 0)
					{
						// get the current component code name
						if (($component_code_name = Helper::getCode(null, false)) === false)
						{
							// if we can't get the component code name we should break put now
							return false;
						}
						// Include wideimage - http://wideimage.sourceforge.net TODO: https://github.com/smottt/WideImage
						require_once(JPATH_ADMINISTRATOR . '/components/com_' . $component_code_name . '/helpers/wideimage/WideImage.php');
						// load the image into the builder
						$builder = \WideImage::load($fullPath);
						// resize the image
						$resized = $builder->resize($width, $height, 'outside')->crop('center', 'middle', $width, $height);
						// save the new image to full file path
						$resized->saveToFile($fullPath);
					}
				}
				return true;
			}
		}
		return false;
	}

	/**
	 * Get Image Properties
	 *
	 * @param   string    $fullPath   The full path to the image
	 *
	 * @return bool|stdClass
	 * @since 3.0.11
	 */
	public static function getProperties($fullPath)
	{
		// check that the file exist
		if (File::exists($fullPath))
		{
			$properties = Image::getImageFileProperties($fullPath);
			// check if we have properties
			if (ObjectHelper::check($properties))
			{
				// get image file name
				$name = basename($fullPath);
				// remove file name from path
				$dir_name = pathinfo($fullPath, PATHINFO_DIRNAME);
				// remove the server path
				$image_public_path = trim(str_replace(JPATH_SITE, '', $dir_name), '/') . '/' . $name;
				// now add the src path to show the image
				$properties->src = Uri::root() . $image_public_path;
				// return the image properties
				return $properties;
			}
		}
		return false;
	}
