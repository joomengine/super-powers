	/**
	 * The first row to read in the current chunk.
	 *
	 * @var int
	 */
	private $startRow;

	/**
	 * The last row to read in the current chunk.
	 * This is calculated as $startRow + $chunkSize - 1.
	 *
	 * @var int
	 */
	private $endRow;

	/**
	 * Constructor to initialize the chunk filter.
	 *
	 * @param int $startRow The starting row to read.
	 * @param int $chunkSize The number of rows to read in each chunk.
	 */
	public function __construct(int $startRow, int $chunkSize)
	{
		$this->startRow = $startRow;
		$this->endRow = $startRow + $chunkSize - 1;
	}

	/**
	 * Determines whether a cell should be read based on its row and column.
	 *
	 * @param string $column The column index (e.g., 'A', 'B', 'C').
	 * @param int $row The row index.
	 * @param string|null $worksheetName The worksheet name (not used in this case).
	 *
	 * @return bool Whether the cell should be read.
	 */
	public function readCell($column, $row, $worksheetName = null)
	{
		// Only read rows that fall within the chunk range
		if ($row >= $this->startRow && $row <= $this->endRow)
		{
			return true;
		}

		return false;
	}